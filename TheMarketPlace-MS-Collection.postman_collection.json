{
	"info": {
		"_postman_id": "7e5a8d6e-3c1d-4b2e-9e96-8f2e4a9d9e43",
		"name": "TheMarketPlace Microservices",
		"description": "A collection to test the TheMarketPlace microservices architecture API endpoints",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Authentication Service",
			"description": "Endpoints for user registration, login, and token management",
			"item": [
				{
					"name": "Register User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains registration data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(0);",
									"    pm.expect(jsonData.data).to.have.property('registrationStepOne');",
									"    pm.expect(jsonData.data).to.have.property('email');",
									"    pm.expect(jsonData.data).to.have.property('confirmationToken');",
									"    pm.expect(jsonData.data.email).to.eql(pm.environment.get(\"userEmail\"));",
									"    ",
									"    // Save confirmation token for next step",
									"    pm.environment.set(\"confirmationToken\", jsonData.data.confirmationToken);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstName\": \"{{firstName}}\",\n    \"lastName\": \"{{lastName}}\",\n    \"email\": \"{{userEmail}}\",\n    \"password\": \"{{userPassword}}\",\n    \"role\": {{userRole}},\n    \"dateOfBirth\": \"{{dateOfBirth}}\"\n}"
						},
						"url": {
							"raw": "{{authServiceUrl}}/api/register",
							"host": [
								"{{authServiceUrl}}"
							],
							"path": [
								"api",
								"register"
							]
						},
						"description": "Register a new user in the system with role specification (0=User, 1=Seller, 2=Admin)"
					}
				},
				{
					"name": "Confirm Email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Email confirmation successful\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(0);",
									"    pm.expect(jsonData.data).to.have.property('succeeded');",
									"    pm.expect(jsonData.data.succeeded).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('email');",
									"    pm.expect(jsonData.data.email).to.eql(pm.environment.get(\"userEmail\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{authServiceUrl}}/api/confirm-email?email={{userEmail}}&token={{confirmationToken}}",
							"host": [
								"{{authServiceUrl}}"
							],
							"path": [
								"api",
								"confirm-email"
							],
							"query": [
								{
									"key": "email",
									"value": "{{userEmail}}"
								},
								{
									"key": "token",
									"value": "{{confirmationToken}}"
								}
							]
						},
						"description": "Confirm user email with token received during registration"
					}
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains JWT token\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(0);",
									"    pm.expect(jsonData.data).to.have.property('securityToken');",
									"    pm.expect(jsonData.data).to.have.property('refreshToken');",
									"    ",
									"    // Save tokens to environment variables for future requests",
									"    pm.environment.set(\"accessToken\", jsonData.data.securityToken);",
									"    pm.environment.set(\"refreshToken\", jsonData.data.refreshToken);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{userEmail}}\",\n    \"password\": \"{{userPassword}}\"\n}"
						},
						"url": {
							"raw": "{{authServiceUrl}}/api/login",
							"host": [
								"{{authServiceUrl}}"
							],
							"path": [
								"api",
								"login"
							]
						},
						"description": "Authenticate user and get JWT tokens"
					}
				},
				{
					"name": "Refresh Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains new JWT token\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(0);",
									"    pm.expect(jsonData.data).to.have.property('securityToken');",
									"    pm.expect(jsonData.data).to.have.property('refreshToken');",
									"    ",
									"    // Update tokens in environment variables",
									"    pm.environment.set(\"accessToken\", jsonData.data.securityToken);",
									"    pm.environment.set(\"refreshToken\", jsonData.data.refreshToken);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"refreshToken\": \"{{refreshToken}}\"\n}"
						},
						"url": {
							"raw": "{{authServiceUrl}}/api/refresh",
							"host": [
								"{{authServiceUrl}}"
							],
							"path": [
								"api",
								"refresh"
							]
						},
							}
			]
		},
		{
			"name": "Listing Service",
			"description": "Endpoints for managing marketplace listings and categories",
			"item": [
				{
					"name": "List Categories",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is an array of categories\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"    if (jsonData.length > 0) {",
									"        pm.expect(jsonData[0]).to.have.property('categoryId');",
									"        pm.expect(jsonData[0]).to.have.property('name');",
									"        ",
									"        // Save first category ID for later use",
									"        pm.environment.set(\"categoryId\", jsonData[0].categoryId);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{listingServiceUrl}}/api/categories",
							"host": [
								"{{listingServiceUrl}}"
							],
							"path": [
								"api",
								"categories"
							]
						},
						"description": "Get all available listing categories"
					}
				},
				{
					"name": "Create Listing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201 Created\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response contains listing data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('listingId');",
									"    pm.expect(jsonData).to.have.property('title');",
									"    pm.expect(jsonData).to.have.property('price');",
									"    ",
									"    // Save listing ID for later use",
									"    pm.environment.set(\"listingId\", jsonData.listingId);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Test Listing for Postman\",\n    \"description\": \"This is a test listing created through Postman\",\n    \"price\": 99.99,\n    \"location\": \"Test City\",\n    \"categoryId\": \"{{categoryId}}\",\n    \"tagNames\": [\"test\", \"postman\", \"api\"]\n}"
						},
						"url": {
							"raw": "{{listingServiceUrl}}/api/listings",
							"host": [
								"{{listingServiceUrl}}"
							],
							"path": [
								"api",
								"listings"
							]
						},
						"description": "Create a new marketplace listing"
					}
				},
				{
					"name": "Get Listing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains expected listing data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('listingId');",
									"    pm.expect(jsonData.listingId).to.eql(pm.environment.get(\"listingId\"));",
									"    pm.expect(jsonData).to.have.property('title');",
									"    pm.expect(jsonData).to.have.property('description');",
									"    pm.expect(jsonData).to.have.property('price');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{listingServiceUrl}}/api/listings/{{listingId}}",
							"host": [
								"{{listingServiceUrl}}"
							],
							"path": [
								"api",
								"listings",
								"{{listingId}}"
							]
						},
						"description": "Get details of a specific listing by ID"
					}
				},
				{
					"name": "Update Listing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains updated listing data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('listingId');",
									"    pm.expect(jsonData.listingId).to.eql(pm.environment.get(\"listingId\"));",
									"    pm.expect(jsonData).to.have.property('title');",
									"    pm.expect(jsonData.title).to.include('Updated');",
									"    pm.expect(jsonData).to.have.property('price');",
									"    pm.expect(jsonData.price).to.eql(129.99);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Updated Test Listing for Postman\",\n    \"description\": \"This listing has been updated through Postman\",\n    \"price\": 129.99,\n    \"location\": \"Test City Updated\",\n    \"categoryId\": \"{{categoryId}}\",\n    \"tagNames\": [\"test\", \"postman\", \"api\", \"updated\"]\n}"
						},
						"url": {
							"raw": "{{listingServiceUrl}}/api/listings/{{listingId}}",
							"host": [
								"{{listingServiceUrl}}"
							],
							"path": [
								"api",
								"listings",
								"{{listingId}}"
							]
						},
						"description": "Update an existing listing"
					}
				},
				{
					"name": "Delete Listing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204 No Content\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{listingServiceUrl}}/api/listings/{{listingId}}",
							"host": [
								"{{listingServiceUrl}}"
							],
							"path": [
								"api",
								"listings",
								"{{listingId}}"
							]
						},
						"description": "Delete a listing by ID"
					}
				}
			]
		},
		{
			"name": "Search Service",
			"description": "Endpoints for searching marketplace listings",
			"item": [
				{
					"name": "Basic Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains search results\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('results');",
									"    pm.expect(jsonData).to.have.property('totalResults');",
									"    pm.expect(jsonData).to.have.property('pageNumber');",
									"    pm.expect(jsonData).to.have.property('pageSize');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{searchServiceUrl}}/api/search?query=test",
							"host": [
								"{{searchServiceUrl}}"
							],
							"path": [
								"api",
								"search"
							],
							"query": [
								{
									"key": "query",
									"value": "test"
								}
							]
						},
						"description": "Perform a basic search on listings"
					}
				},
				{
					"name": "Advanced Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains filtered search results\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('results');",
									"    pm.expect(jsonData).to.have.property('totalResults');",
									"    pm.expect(jsonData).to.have.property('pageNumber');",
									"    pm.expect(jsonData).to.have.property('pageSize');",
									"    pm.expect(jsonData).to.have.property('filters');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"query\": \"test\",\n    \"filters\": {\n        \"minPrice\": 50,\n        \"maxPrice\": 150,\n        \"categoryIds\": [\"{{categoryId}}\"],\n        \"location\": \"Test City\",\n        \"tagNames\": [\"postman\", \"api\"]\n    },\n    \"sort\": {\n        \"field\": \"price\",\n        \"direction\": \"asc\"\n    },\n    \"pagination\": {\n        \"pageNumber\": 1,\n        \"pageSize\": 10\n    }\n}"
						},
						"url": {
							"raw": "{{searchServiceUrl}}/api/search/advanced",
							"host": [
								"{{searchServiceUrl}}"
							],
							"path": [
								"api",
								"search",
								"advanced"
							]
						},
						"description": "Perform an advanced search with filters, sorting, and pagination"
					}
				}
			]
		},
		{
			"name": "Document Processor",
			"description": "Endpoints for document generation and management",
			"item": [
				{
					"name": "Generate Document",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 202 Accepted\", function () {",
									"    pm.response.to.have.status(202);",
									"});",
									"",
									"pm.test(\"Response contains job ID\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('jobId');",
									"    ",
									"    // Save job ID for later use",
									"    pm.environment.set(\"jobId\", jsonData.jobId);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"listing_pdf\",\n    \"parameters\": {\n        \"listingId\": \"{{listingId}}\",\n        \"includeImages\": true,\n        \"includeContactInfo\": true\n    }\n}"
						},
						"url": {
							"raw": "{{documentProcessorUrl}}/api/documents/generate",
							"host": [
								"{{documentProcessorUrl}}"
							],
							"path": [
								"api",
								"documents",
								"generate"
							]
						},
						"description": "Request generation of a document based on a listing"
					}
				},
				{
					"name": "Get Document Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains job status information\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('jobId');",
									"    pm.expect(jsonData.jobId).to.eql(pm.environment.get(\"jobId\"));",
									"    pm.expect(jsonData).to.have.property('status');",
									"    pm.expect(jsonData).to.have.property('createdAt');",
									"    ",
									"    // If document is ready, save document ID for download",
									"    if (jsonData.status === 'Completed' && jsonData.documentId) {",
									"        pm.environment.set(\"documentId\", jsonData.documentId);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{documentProcessorUrl}}/api/documents/jobs/{{jobId}}",
							"host": [
								"{{documentProcessorUrl}}"
							],
							"path": [
								"api",
								"documents",
								"jobs",
								"{{jobId}}"
							]
						},
						"description": "Check the status of a document generation job"
					}
				},
				{
					"name": "Download Document",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type header is present and has PDF type\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/pdf\");",
									"});",
									"",
									"pm.test(\"Content-Disposition header is present\", function () {",
									"    pm.response.to.have.header(\"Content-Disposition\");",
									"    pm.expect(pm.response.headers.get(\"Content-Disposition\")).to.include(\"attachment\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{documentProcessorUrl}}/api/documents/download/{{documentId}}",
							"host": [
								"{{documentProcessorUrl}}"
							],
							"path": [
								"api",
								"documents",
								"download",
								"{{documentId}}"
							]
						},
						"description": "Download a generated document by ID"
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global pre-request script",
					"// Check if token exists and is valid, otherwise try to login",
					"const authServiceUrl = pm.environment.get(\"authServiceUrl\");",
					"const accessToken = pm.environment.get(\"accessToken\");",
					"const refreshToken = pm.environment.get(\"refreshToken\");",
					"const userEmail = pm.environment.get(\"userEmail\");",
					"const userPassword = pm.environment.get(\"userPassword\");",
					"",
					"// Only attempt auto-login for authenticated endpoints",
					"if (pm.request.auth && pm.request.auth.type === \"bearer\" && !accessToken) {",
					"    console.log(\"No access token found. Attempting to login...\");",
					"    ",
					"    pm.sendRequest({",
					"        url: authServiceUrl + \"/api/login\",
					"        method: \"POST\",",
					"        header: {",
					"            \"Content-Type\": \"application/json\"",
					"        },",
					"        body: {",
					"            mode: \"raw\",",
					"            raw: JSON.stringify({",
					"                email: userEmail,",
					"                password: userPassword",
					"            })",
					"        }",
					"    }, function (err, res) {",
					"        if (err) {",
					"            console.error(\"Error during auto-login:\", err);",
					"        } else if (res.code === 200) {",
					"            const jsonData = res.json();",
					"            if (jsonData && jsonData.data && jsonData.data.securityToken) {",
					"                pm.environment.set(\"accessToken\", jsonData.data.securityToken);",
					"                pm.environment.set(\"refreshToken\", jsonData.data.refreshToken);",
					"                console.log(\"Auto-login successful, token saved.\");",
					"            }",
					"        } else {",
					"            console.error(\"Failed to auto-login. Status:\", res.code);",
					"        }",
					"    });",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global test script",
					"// Handle 401 Unauthorized errors by trying to refresh the token",
					"if (pm.response.code === 401) {",
					"    const authServiceUrl = pm.environment.get(\"authServiceUrl\");",
					"    const refreshToken = pm.environment.get(\"refreshToken\");",
					"    ",
					"    if (refreshToken) {",
					"        console.log(\"Attempting to refresh expired token...\");",
					"        ",
					"        pm.sendRequest({",
					"            url: authServiceUrl + \"/api/refresh\",
					"            method: \"POST\",",
					"            header: {",
					"                \"Content-Type\": \"application/json\"",
					"            },",
					"            body: {",
					"                mode: \"raw\",",
					"                raw: JSON.stringify({",
					"                    refreshToken: refreshToken",
					"                })",
					"            }",
					"        }, function (err, res) {",
					"            if (err) {",
					"                console.error(\"Error during token refresh:\", err);",
					"            } else if (res.code === 200) {",
					"                const jsonData = res.json();",
					"                if (jsonData && jsonData.data && jsonData.data.securityToken) {",
					"                    pm.environment.set(\"accessToken\", jsonData.data.securityToken);",
					"                    pm.environment.set(\"refreshToken\", jsonData.data.refreshToken);",
					"                    console.log(\"Token refresh successful. Please retry your request.\");",
					"                }",
					"            } else {",
					"                console.error(\"Failed to refresh token. Status:\", res.code);",
					"                // Clear invalid tokens",
					"                pm.environment.unset(\"accessToken\");",
					"                pm.environment.unset(\"refreshToken\");",
					"            }",
					"        });",
					"    }",
					"}"
				]
			}
		}
	]
}

